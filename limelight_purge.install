<?php
/**
 * @file
 * limelight_purge.install
 */

/**
 * Implements hook_install().
 */
function limelight_purge_install() {
  variable_set('limelight_purge_limelight_api_shared_key', '');
  variable_set('limelight_purge_limelight_api_username', '');
  variable_set('limelight_purge_limelight_api_shortname', '');
  variable_set('limelight_purge_queue_process_on_cron', 1);
  variable_set('limelight_purge_queue_ignored_paths', '');
  variable_set('queue_class_limelight_purge_queue', 'LimelightPurgeQueue');
}

/**
 * Implements hook_uninstall().
 */
function limelight_purge_uninstall() {
  variable_del('limelight_purge_limelight_api_shared_key');
  variable_del('limelight_purge_limelight_api_username');
  variable_del('limelight_purge_limelight_api_shortname');
  variable_del('limelight_purge_queue_process_on_cron');
  variable_del('limelight_purge_queue_ignored_paths');
  variable_del('queue_class_limelight_purge_queue');

  module_load_include('module', 'limelight_purge');
  $queue = limelight_purge_queue();
  $queue->deleteQueue();
}

/**
 * Implements hook_requirements().
 */
function limelight_purge_requirements($phase) {
  $requirements = array();
  if ('runtime' === $phase) {
    $t = get_t();
    $requirements['limelight_api_auth'] = array(
      'title' => $t('Limelight Purge API'),
      'description' => $t('Limelight Purge module requires that the Limelight CDN Username, Shortname and Shared Key are configured for purging of URLs to occur.'),
      'severity' => REQUIREMENT_OK,
      'value' => $t('OK'),
    );

    module_load_include('module', 'limelight_purge');
    if (!limelight_purge_limelight_api_username() || !limelight_purge_limelight_api_shortname() || !limelight_purge_limelight_api_shared_key()) {
      $requirements['limelight_api_auth']['value'] = $t('Missing configuration');
      $requirements['limelight_api_auth']['severity'] = REQUIREMENT_ERROR;
    }
  }
  return $requirements;
}

/**
 * Performs bulk update of all serialized URLs with singular implementation.
 */
function limelight_purge_update_7001() {
  variable_set('limelight_purge_queue_ignored_paths', '');
  variable_set('queue_class_limelight_purge_queue', 'LimelightPurgeQueue');

  $urls = array();
  $item_ids = array();
  $query = db_select('queue', 'q')
    ->fields('q')
    ->condition('name', 'limelight_purge_queue')
    ->execute();
  while ($item = $query->fetchObject()) {
    $item->data = @unserialize($item->data);
    if (is_array($item->data)) {
      $item_ids[] = $item->item_id;
      if (!empty($item->data['urls'])) {
        foreach ($item->data['urls'] as $url) {
          if (!in_array($url, $urls)) {
            $urls[] = $url;
          }
        }
      }
    }
  }

  if (!empty($item_ids)) {
    db_delete('queue')
      ->condition('name', 'limelight_purge_queue')
      ->condition('item_id', $item_ids, 'IN')
      ->execute();

    $queue = limelight_purge_queue();
    foreach ($urls as $url) {
      if (!$queue->itemExists($url)) {
        $queue->createItem($url);
      }
    }
  }
}
